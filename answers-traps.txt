> Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
- a0, a1, and a2
- a2 holds 13 in main's call to printf

> Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
- There is no call to function f or g in the assembly code for main. The compiler has inlined the call to g in f, and precomputed the result of f(8) + 1 in main.

> At what address is the function printf located?
- 0x640

> What value is in the register ra just after the jalr to printf in main?
- 0x40

> Run the following code.

	 unsigned int i = 0x00646c72;
	 printf("H%x Wo%s", 57616, &i);
      
> What is the output? Here's an ASCII table that maps bytes to characters.
- He110 World
> The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
- i = 0x726c6400
- No, 57616 would remain the same because it is both stored and interpreted as an integer, in which case the endianness of the system is irrelevant.

> In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	 printf("x=%d y=%d", 3);
- It is going to be whatever in the a2 register at the time of the call to printf. This is because the c code does not pass in the third argument so a2 is not overwritten at the time of the printf call, while in the printf function it will just take the value of a2 to format "y=%d".